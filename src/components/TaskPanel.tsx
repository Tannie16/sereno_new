import { useState, useEffect } from "react";
import { Plus, Trash2, CheckCircle2, Circle } from "lucide-react";
import axios from 'axios';

// --- Define the Task type to match your backend model ---
interface BackendTask {
Â  id: string; // Changed from number to string (Guid)
Â  title: string; // Renamed from text
Â  isComplete: boolean; // Renamed from completed
Â  // Add other fields from your C# TaskItem model if needed for display/logic
Â  description?: string | null;
Â  targetPomodoros: number;
Â  completedPomodoros: number;
Â  createdAt: string; // Or Date
Â  tags: string; // Keep as string (jsonb in backend)
Â  order: number;
Â  dueDate?: string | null; // Or Date | null
Â  updatedAt?: string | null; // Or Date | null
}

const API_BASE_URL = 'https://localhost:5001/api'; // Your backend base URL

// --- Function to get the JWT token ---
// Assumes you saved the session in localStorage after login in Auth.tsx
const getToken = (): string | null => {
Â  try {
Â  Â  // Supabase v2 stores the session under this key
Â  Â  const sessionKey = Object.keys(localStorage).find(key => key.startsWith('sb-') && key.endsWith('-auth-token'));
Â  Â  if (!sessionKey) return null;

Â  Â  const sessionData = JSON.parse(localStorage.getItem(sessionKey) || '{}');
Â  Â  return sessionData?.access_token || null;
Â  } catch (error) {
Â  Â  console.error("Error retrieving token from localStorage:", error);
Â  Â  return null;
Â  }
};

// --- Function to get headers with token ---
const getAuthHeaders = () => {
Â  const token = getToken();
Â  if (!token) {
Â  Â  console.error("No auth token found! User might need to log in again.");
Â  Â  // In a real app, you might redirect to login here
Â  Â  throw new Error("Authentication token not found.");
Â  }
Â  return { 'Authorization': `Bearer ${token}` };
};

// --- API Call Functions ---
const fetchTasksApi = async (): Promise<BackendTask[]> => {
Â  console.log("Fetching tasks from API...");
Â  const response = await axios.get<BackendTask[]>(`${API_BASE_URL}/tasks`, { headers: getAuthHeaders() });
Â  console.log("Tasks fetched:", response.data);
Â  return response.data;
};

// Adjusted to match backend expectation for CreateTask
const addTaskApi = async (newTaskData: { title: string; targetPomodoros: number; tags: string; /* other optional fields */ }): Promise<BackendTask> => {
Â  console.log("Adding task via API:", newTaskData);
Â  const response = await axios.post<BackendTask>(`${API_BASE_URL}/tasks`, newTaskData, { headers: getAuthHeaders() });
Â  console.log("Task added:", response.data);
Â  return response.data;
};

// ðŸ’¡ FIX APPLIED: Changed updatedFields type to BackendTask (not Partial) 
// to ensure all required fields are sent in the PUT request.
const updateTaskApi = async (id: string, updatedFields: BackendTask): Promise<BackendTask> => {
Â  console.log(`Updating task ${id} via API:`, updatedFields);
Â  const response = await axios.put<BackendTask>(`${API_BASE_URL}/tasks/${id}`, updatedFields, { headers: getAuthHeaders() });
Â  console.log("Task updated:", response.data);
Â  return response.data;
};

const deleteTaskApi = async (id: string): Promise<void> => {
Â  console.log(`Deleting task ${id} via API...`);
Â  await axios.delete(`${API_BASE_URL}/tasks/${id}`, { headers: getAuthHeaders() });
Â  console.log(`Task ${id} deleted.`);
};


// --- Your Updated TaskPanel Component ---
const TaskPanel = () => {
Â  const [tasks, setTasks] = useState<BackendTask[]>([]); // Use BackendTask type
Â  const [taskInput, setTaskInput] = useState("");
Â  const [isLoading, setIsLoading] = useState(true); // Added loading state
Â  const [error, setError] = useState<string | null>(null); // Added error state

Â  // --- Fetch tasks when component mounts ---
Â  useEffect(() => {
Â  Â  const loadTasks = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  setError(null); // Clear previous errors
Â  Â  Â  Â  const fetchedTasks = await fetchTasksApi();
Â  Â  Â  Â  setTasks(fetchedTasks);
Â  Â  Â  } catch (err: any) {
Â  Â  Â  Â  console.error("Failed to fetch tasks:", err);
Â  Â  Â  Â  setError(err.message || "Failed to load tasks. Please ensure you are logged in and the backend is running.");
Â  Â  Â  } finally {
Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  loadTasks();
Â  }, []); // Empty dependency array means run once on mount

Â  // --- Add Task ---
Â  const addTask = async () => {
Â  Â  if (taskInput.trim()) {
Â  Â  Â  // Clear previous errors
Â  Â  Â  setError(null);
Â  Â  Â  try {
Â  Â  Â  Â  const newTaskData = {
Â  Â  Â  Â  Â  title: taskInput,
Â  Â  Â  Â  Â  // You might want to get these from other inputs later
Â  Â  Â  Â  Â  targetPomodoros: 1,
Â  Â  Â  Â  Â  tags: "[]" // Default empty JSON array string
Â  Â  Â  Â  };
Â  Â  Â  Â  const addedTask = await addTaskApi(newTaskData);
Â  Â  Â  Â  setTasks(prevTasks => [...prevTasks, addedTask]); // Add the task returned from backend
Â  Â  Â  Â  setTaskInput(""); // Clear input field
Â  Â  Â  } catch (err: any) {
Â  Â  Â  Â  console.error("Failed to add task:", err);
Â  Â  Â  Â  setError(err.message || "Failed to add task. Please try again.");
Â  Â  Â  }
Â  Â  }
Â  };

Â  // --- Toggle Task Completion ---
Â  const toggleTask = async (id: string) => {
Â  Â  const taskToToggle = tasks.find((t) => t.id === id);
Â  Â  if (!taskToToggle) return;

Â  Â  // ðŸ’¡ FIX APPLIED: Create the complete task object with the new status.
Â  Â  const updatedTaskData: BackendTask = { 
Â  Â  Â  Â  ...taskToToggle, 
Â  Â  Â  Â  isComplete: !taskToToggle.isComplete 
Â  Â  };

Â  Â  // Clear previous errors
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  // Send the ENTIRE task object
Â  Â  Â  const updatedTask = await updateTaskApi(id, updatedTaskData);
Â  Â  Â  // Update the state with the complete task returned from the backend
Â  Â  Â  setTasks(prevTasks => prevTasks.map((t) => (t.id === id ? updatedTask : t)));
Â  Â  } catch (err: any) {
Â  Â  Â  console.error("Failed to toggle task:", err);
Â  Â  Â  setError(err.message || "Failed to update task completion. Please try again.");
Â  Â  }
Â  };

Â  // --- Delete Task ---
Â  const deleteTask = async (id: string) => {
Â  Â  // Store original tasks in case we need to revert
Â  Â  const originalTasks = [...tasks];
Â  Â  // Optimistic UI update: remove immediately from the list
Â  Â  setTasks(prevTasks => prevTasks.filter((t) => t.id !== id));
Â  Â  // Clear previous errors
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  await deleteTaskApi(id);
Â  Â  Â  // If API call succeeds, state is already correct
Â  Â  } catch (err: any) {
Â  Â  Â  console.error("Failed to delete task:", err);
Â  Â  Â  setError(err.message || "Failed to delete task. Please try again.");
Â  Â  Â  // Revert state if the API call fails
Â  Â  Â  setTasks(originalTasks);
Â  Â  }
Â  };

Â  // --- JSX (Adjusted for BackendTask fields, loading, and error) ---
Â  return (
Â  Â  <div className="w-full max-w-md glass-panel rounded-2xl p-6">
Â  Â  Â  <h3 className="text-2xl font-bold mb-4 text-foreground">Tasks</h3>

Â  Â  Â  {/* Input Form - UI FIX APPLIED HERE */}
Â  Â  Â  <div className="flex items-center gap-2 mb-4"> 
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  value={taskInput}
Â  Â  Â  Â  Â  onChange={(e) => setTaskInput(e.target.value)}
Â  Â  Â  Â  Â  onKeyPress={(e) => e.key === "Enter" && addTask()}
Â  Â  Â  Â  Â  placeholder="Add a new task title..."
Â  Â  Â  Â  Â  className="flex-1 px-4 py-2 bg-white/5 border border-white/20 rounded-lg text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary"
Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  />
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={addTask}
Â  Â  Â  Â  Â  // Ensured the button height matches the input for alignment
Â  Â  Â  Â  Â  className="p-2 h-10 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-all disabled:opacity-50 flex-shrink-0"
Â  Â  Â  Â  Â  aria-label="Add task"
Â  Â  Â  Â  Â  disabled={isLoading || !taskInput.trim()}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Plus className="w-5 h-5" />
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {/* Error Display */}
Â  Â  Â  {error && <p className="text-destructive text-sm mb-2 text-center">{error}</p>}

Â  Â  Â  {/* Task List */}
Â  Â  Â  <ul className="space-y-2 max-h-64 overflow-y-auto">
Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  <p className="text-center text-muted-foreground py-8">Loading tasks...</p>
Â  Â  Â  Â  ) : tasks.length === 0 && !error ? (
Â  Â  Â  Â  Â  <p className="text-center text-muted-foreground py-8">No tasks yet. Add one!</p>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  tasks.map((task) => (
Â  Â  Â  Â  Â  Â  <li
Â  Â  Â  Â  Â  Â  Â  key={task.id}
Â  Â  Â  Â  Â  Â  Â  className="flex items-center gap-3 p-3 bg-white/5 rounded-lg border border-white/10 hover:bg-white/10 transition-all group"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => toggleTask(task.id)}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex-shrink-0"
Â  Â  Â  Â  Â  Â  Â  Â  aria-label={task.isComplete ? "Mark as incomplete" : "Mark as complete"}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {task.isComplete ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <CheckCircle2 className="w-5 h-5 text-accent" />
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Circle className="w-5 h-5 text-muted-foreground" />
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <span
Â  Â  Â  Â  Â  Â  Â  Â  className={`flex-1 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  task.isComplete ? "line-through text-muted-foreground" : "text-foreground"
Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {task.title} {/* Changed from text */}
Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => deleteTask(task.id)}
Â  Â  Â  Â  Â  Â  Â  Â  className="flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity text-destructive hover:text-destructive/80"
Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Delete task"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <Trash2 className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  )}
Â  Â  Â  </ul>
Â  Â  </div>
Â  );
};

export default TaskPanel;